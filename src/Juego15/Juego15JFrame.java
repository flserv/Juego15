/*
La clase Juego15JFrame contiene la ventana principal del juego. La ventana 
contiene dos paneles. En el primero se presentan las 16 piezas del puzle, una 
de ellas negra, vacía.
En el segundo hay un cronómetro y tres botones. Al pulsar el primer botón se 
desordena el puzle y se pone en marcha el cronómetro. Si se pulsa durante el 
juego se para el cronómetro y se oculta el primer panel. Al pulsarlo otra vez
se vuelve a visualizar el puzle y se vuelve a poner en marcha el cronómetro.
Se juega por teclado, utilizando las teclas de flecha para ordenar los 
movimientos. Cuando el jugador completa el puzle, una ventana anuncia que ha
completado el juego y solicita que introduzca su nombre. Cada vez que se 
completa el puzle se añade un nuevo registro (de la clase Record) a la lista
de puntuaciones miRanking (de la clase Ranking). A continuación se abre una 
ventana de la clase "PresentaTablaPntuaciones" con la lista del ranking.
El segundo botón abre una nueva ventana que ofrece cuatro opciones:
Crear un nuevo puzle a partir de un archivo de imagen, cambiar el puzle por 
otro, presentar las puntuaciones y salir de la ventana para continuar jugando.
El tercer botón termina el juego y cierra el programa.
Las imágenes de cada pieza del puzle están en un archivo de extensión ".pzl"
que contiene un array de ImageIcon de 16 elementos que se recupera de disco al 
principio del juego o cuando se selecciona "cambiar de puzle".

 */
package Juego15;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;

public class Juego15JFrame extends javax.swing.JFrame implements KeyListener {

    public Juego15JFrame() {
        initComponents();
        setLocationRelativeTo(null);
        try {
            this.miJuego = new Tablero(4);
        } catch (MenorQueUnoException ex) {
            Logger.getLogger(Juego15JFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.juegoEstaIniciado = false;
        initJuego();
        inicializaKeyListeners();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Juego del 15");
        setBackground(new java.awt.Color(153, 0, 51));
        setForeground(new java.awt.Color(153, 0, 51));
        setResizable(false);
        setSize(new java.awt.Dimension(440, 330));

        jPanel1.setBackground(new java.awt.Color(153, 255, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        jPanel1.setMaximumSize(new java.awt.Dimension(330, 330));
        jPanel1.setPreferredSize(new java.awt.Dimension(330, 330));
        jPanel1.setLayout(new java.awt.GridLayout(4, 4));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setAlignmentY(0.0F);
        jPanel1.add(jLabel1);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setAlignmentY(0.0F);
        jPanel1.add(jLabel2);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setAlignmentY(0.0F);
        jPanel1.add(jLabel3);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setAlignmentY(0.0F);
        jPanel1.add(jLabel4);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setAlignmentY(0.0F);
        jPanel1.add(jLabel5);

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setAlignmentY(0.0F);
        jPanel1.add(jLabel6);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setAlignmentY(0.0F);
        jPanel1.add(jLabel7);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setAlignmentY(0.0F);
        jPanel1.add(jLabel8);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setAlignmentY(0.0F);
        jPanel1.add(jLabel9);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setAlignmentY(0.0F);
        jPanel1.add(jLabel10);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setAlignmentY(0.0F);
        jPanel1.add(jLabel11);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setAlignmentY(0.0F);
        jPanel1.add(jLabel12);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setAlignmentY(0.0F);
        jPanel1.add(jLabel13);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setAlignmentY(0.0F);
        jPanel1.add(jLabel14);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setAlignmentY(0.0F);
        jPanel1.add(jLabel15);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setAlignmentY(0.0F);
        jPanel1.add(jLabel16);

        getContentPane().add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setMaximumSize(new java.awt.Dimension(110, 330));
        jPanel2.setMinimumSize(new java.awt.Dimension(110, 330));
        jPanel2.setPreferredSize(new java.awt.Dimension(110, 330));
        jPanel2.setLayout(new java.awt.GridLayout(4, 1));

        jLabel17.setBackground(new java.awt.Color(51, 0, 102));
        jLabel17.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 0, 0));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("00:00");
        jLabel17.setToolTipText("");
        jLabel17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel2.add(jLabel17);

        jButton1.setText("Iniciar juego");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jButton2.setText("Opciones");
        jButton2.setEnabled(!juegoEstaIniciado);
        jButton2.setMargin(new java.awt.Insets(2, 1, 2, 1));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);

        jButton3.setText("Salir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);

        getContentPane().add(jPanel2, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initJuego() {
        cargaImagenes(); //Recupera de un achivo el array con las imágenes.
        rellenaTablero();//Coloca en cada label su imagen correspondiente.
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (this.juegoEstaIniciado) {
            if (this.juegoEstaPausado) {
                reanudarJuego();
            } else {
                pausarJuego();
            }
        } else {
            iniciarJuego();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int seleccion = JOptionPane.showOptionDialog(
                null,
                "Seleccione una opción",
                "Opciones de juego",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                new Object[]{"Crear nuevo puzle", "Cambiar de puzle", "Ver puntuacones", "Volver"},
                "volver");
        switch (seleccion) {
            case 0:
                try {
                    crearNuevoArchivoTiles();
                } catch (IOException ex) {
                    Logger.getLogger(Juego15JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;

            case 1:
                cambiarArchivoTiles();
                break;
            case 2:
                recuperarPuntuaciones();//lee las puntuaciones desde un archivo.
                presentaPuntuaciones();//Presenta una tabla con las puntuaciones.
                break;
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Juego15JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Juego15JFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

    private Tablero miJuego;
    public String nombreArchivoTiles = "SelfPortraitInOwlSEye.pzl";
    private ImageIcon[] tiles;
    private boolean juegoEstaIniciado;
    private boolean juegoEstaPausado;
    private long segundos;
    private Ranking miRanking = new Ranking();
    public static final String NOMBRE_ARCHIVO_PUNTUACIONES = "j15puntuaciones.rnk";
    private PresentaTablaPuntuaciones tablaPuntuaciones;

    private Timer timer = new Timer(1000, new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            actualizaIndicadorTiempo();
        }
    });

    private void actualizaIndicadorTiempo() {
        segundos += 1;
        jLabel17.setText(String.format("%02d", segundos / 60) + ":" + String.format("%02d", segundos % 60));
    }

    private void rellenaTablero() {
        //Pone en cada pieza su imagen.
        jLabel1.setIcon(tiles[miJuego.getCasillas()[0][0]]);
        jLabel2.setIcon(tiles[miJuego.getCasillas()[0][1]]);
        jLabel3.setIcon(tiles[miJuego.getCasillas()[0][2]]);
        jLabel4.setIcon(tiles[miJuego.getCasillas()[0][3]]);
        jLabel5.setIcon(tiles[miJuego.getCasillas()[1][0]]);
        jLabel6.setIcon(tiles[miJuego.getCasillas()[1][1]]);
        jLabel7.setIcon(tiles[miJuego.getCasillas()[1][2]]);
        jLabel8.setIcon(tiles[miJuego.getCasillas()[1][3]]);
        jLabel9.setIcon(tiles[miJuego.getCasillas()[2][0]]);
        jLabel10.setIcon(tiles[miJuego.getCasillas()[2][1]]);
        jLabel11.setIcon(tiles[miJuego.getCasillas()[2][2]]);
        jLabel12.setIcon(tiles[miJuego.getCasillas()[2][3]]);
        jLabel13.setIcon(tiles[miJuego.getCasillas()[3][0]]);
        jLabel14.setIcon(tiles[miJuego.getCasillas()[3][1]]);
        jLabel15.setIcon(tiles[miJuego.getCasillas()[3][2]]);
        jLabel16.setIcon(tiles[miJuego.getCasillas()[3][3]]);
    }

    private void cargaImagenes() {
        this.tiles = null;
        FileInputStream fileIn = null;
        try {
            fileIn = new FileInputStream(nombreArchivoTiles);
            ObjectInputStream in = new ObjectInputStream(fileIn);
            this.tiles = (ImageIcon[]) in.readObject();
            in.close();
            fileIn.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Juego15JFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(Juego15JFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fileIn.close();
            } catch (IOException ex) {
                Logger.getLogger(Juego15JFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private void iniciarJuego() {
        juegoEstaIniciado = true;
        juegoEstaPausado = false;
        jButton2.setEnabled(false);//No se permite cambiar el puzle a mitad del juego. Son las normas...
        miJuego.desordenar();
        rellenaTablero();
        timer.start();
        jButton1.setText("Pausar juego");
    }

    private void reanudarJuego() {
        juegoEstaPausado = false;
        jPanel1.setVisible(true);
        timer.start();
        jButton1.setText("Pausar juego");
    }

    private void pausarJuego() {
        juegoEstaPausado = true;
        jPanel1.setVisible(false);
        timer.stop();
        jButton1.setText("Reanudar juego");
    }

    private void continuar() {//Se redibuja el tablero y si está ordenado se termina el juego
        rellenaTablero();
        if (miJuego.estaOrdenado()) {
            finDelJuego();
        }
    }

    private void finDelJuego() {
        /*
        Cuando se ha completado el juego se toman la fecha y la hora del sistema
        y se abre un JOptionPane para pedir al jugador que introduzca su nombre.
         */
        timer.stop();
        SimpleDateFormat formatoDeFecha = new SimpleDateFormat("dd/MM/yyy HH:mm:ss");
        String horaFinJuego = formatoDeFecha.format(new Date());
        String nombreJugador = "???";
        try {
            nombreJugador = JOptionPane.showInputDialog(null, "¡¡¡GANASTE!!!  Introduce tu nombre:", "Juego completado", JOptionPane.INFORMATION_MESSAGE).trim();

        } catch (NullPointerException ex) {
        } finally {
            if ("".equals(nombreJugador)) {
                nombreJugador = "???";//Si el jugador no escribe nada, o sólo pone espacios, se grabará "???"
            }
        }
        /*
        Con esta información se crea un objeto de la clase Record que se añade al ranking.
        Después se presenta la tabla de puntuaciones y se resetea el juego.
         */
        Record nuevoRecord = new Record(segundos, nombreJugador, horaFinJuego, nombreArchivoTiles);
        actualizarRanking(nuevoRecord);
        presentaPuntuaciones();
        resetearJuego();
    }

    private void resetearJuego() {
        juegoEstaIniciado = false;
        juegoEstaPausado = false;
        jButton1.setText("Iniciar juego");
        jButton2.setEnabled(true);
        jLabel17.setText("00:00");
        segundos = 0;
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();
        //Si el juego no está iniciado o está en pausa el keylistener no hará nada
        if (juegoEstaIniciado && (!juegoEstaPausado)) {
            switch (key) {
                case 39://Mover ficha a la derecha
                    if (miJuego.mueve(1)) {
                        continuar();
                    }
                    break;
                case 40://mover ficha hacia abajo
                    if (miJuego.mueve(2)) {
                        continuar();
                    }
                    break;
                case 37://mover ficha a la izquierda
                    if (miJuego.mueve(3)) {
                        continuar();
                    }
                    break;
                case 38://mover ficha hacia arriba
                    if (miJuego.mueve(4)) {
                        continuar();
                    }
                    break;
                default:

            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    private void inicializaKeyListeners() {//Se añade a los tres botones que pueden tener el foco.
        jButton1.addKeyListener(this);
        jButton2.addKeyListener(this);
        jButton3.addKeyListener(this);
    }

    private void actualizarRanking(Record nuevoRecord) {
        recuperarPuntuaciones();
        this.miRanking.put(segundos, nuevoRecord);
        grabarPuntuaciones();
    }

    private void recuperarPuntuaciones() {
        this.miRanking.recuperarDeArchivo(NOMBRE_ARCHIVO_PUNTUACIONES);
    }

    private void grabarPuntuaciones() {
        this.miRanking.grabarAArchivo(NOMBRE_ARCHIVO_PUNTUACIONES);
    }

    private void presentaPuntuaciones() {//Crea y presenta la tabla con las puntuaciones.
        if (!(tablaPuntuaciones == null)) {
            tablaPuntuaciones.dispose();//Si ya había una tabla abierta, la cierra para presentar una actualizada.
        }

        tablaPuntuaciones = new PresentaTablaPuntuaciones(this.miRanking.toStringArray());
        tablaPuntuaciones.setSize(640, 200);
        tablaPuntuaciones.setLocationRelativeTo(this);
        tablaPuntuaciones.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        tablaPuntuaciones.setVisible(true);
    }

    private void cambiarArchivoTiles() {//Para cambiar el archivo de las imágenes del puzle se utiliza un JFileChooser
        JFileChooser miFileChooser = new JFileChooser();
        miFileChooser.setCurrentDirectory(new java.io.File("."));
        miFileChooser.setDialogTitle("Selecciona un puzle");
        miFileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de puzle PZL", "pzl");
        miFileChooser.addChoosableFileFilter(filter);

        int returnValue = miFileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            nombreArchivoTiles = miFileChooser.getSelectedFile().getName();
        }//Del JFileChooser se toma el nombre del archivo, pero no se abre aquí.

        initJuego();//Se llama al método initJuego que es el que abrirá el archivo.

    }

    private void crearNuevoArchivoTiles() throws IOException {
//Utiliza un JFileChooser para buscar un archivo de imagen.
        JFileChooser miFileChooser = new JFileChooser();
        miFileChooser.setCurrentDirectory(new java.io.File("."));
        miFileChooser.setDialogTitle("Selecciona una imagen");
        miFileChooser.setToolTipText("Si la imagen no es cuadrada será deformada");
        miFileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos JPG o PNG", "jpg", "png");
        miFileChooser.addChoosableFileFilter(filter);
        int returnValue = miFileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            Image miImagen = ImageIO.read(miFileChooser.getSelectedFile());
            //Se redimensiona la imagen a tamaño 320x320 pixeles.
            miImagen = miImagen.getScaledInstance(320, 320, java.awt.Image.SCALE_SMOOTH);
            String nombreNuevoArchivoTiles = miFileChooser.getSelectedFile().getName();
            nombreNuevoArchivoTiles = nombreNuevoArchivoTiles.substring(0, nombreNuevoArchivoTiles.lastIndexOf("."));
            nombreNuevoArchivoTiles += ".pzl";
            int posX;
            int posY;
            //Se divide la imagen en piezas de 80x80 y se almacenan en un array de ImageIcon
            for (int i = 0; i < tiles.length - 1; i++) {
                posX = (i * 80) % 320;
                posY = i / 4 * 80;
                tiles[i] = new ImageIcon(toBufferedImage(miImagen).getSubimage(posX, posY, 80, 80));
            }
            //La última pieza es un cuadrado negro
            tiles[15] = new javax.swing.ImageIcon(getClass().getResource("/Images/negro.png"));
            //Se guarda el array en un archivo con el mismo nombre del archivo de imagen original y la extensión "pzl".
            FileOutputStream fileOut = new FileOutputStream(nombreNuevoArchivoTiles);
            ObjectOutputStream outStream = new ObjectOutputStream(fileOut);
            outStream.writeObject(tiles);
            outStream.close();
            fileOut.close();
            //Se inicializa el juego con la nueva imagen.
            nombreArchivoTiles = nombreNuevoArchivoTiles;
            initJuego();

        }
    }

    /**
     * Converts a given Image into a BufferedImage
     *
     * @param img The Image to be converted
     * @return The converted BufferedImage
     */
    public static BufferedImage toBufferedImage(Image img) {
        if (img instanceof BufferedImage) {
            return (BufferedImage) img;
        }

        // Create a buffered image with transparency
        BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

        // Draw the image on to the buffered image
        Graphics2D bGr = bimage.createGraphics();
        bGr.drawImage(img, 0, 0, null);
        bGr.dispose();

        // Return the buffered image
        return bimage;
    }
}
